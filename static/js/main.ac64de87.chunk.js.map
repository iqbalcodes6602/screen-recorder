{"version":3,"sources":["@UI/AppHeader/AppHeader.tsx","@UI/MainRecorder/MainRecorder.tsx","theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppHeader","theme","useTheme","useState","wrapper","setWrapper","flex","mb","padding","bg","colors","gray","color","style","position","zIndex","height","width","display","align","fontSize","mt","size","aria-label","onClick","e","memo","MainRecorder","recorder","setRecorder","stream","setStream","videoBlob","setVideoUrlBlob","type","setType","showText","setShowText","liveVideoRef","useRef","useEffect","current","srcObject","startRecording","a","mediaDevices","navigator","getUserMedia","video","audio","getDisplayMedia","RecordRTCPromisesHandler","stopRecording","getBlob","blob","stop","spacing","p","justifyContent","flexDirection","m","marginLeft","icon","as","FaPlay","disabled","FaVideoSlash","mp4File","File","saveAs","Date","now","FaDownload","h","src","window","URL","createObjectURL","ref","autoPlay","muted","top","left","transform","extendTheme","config","initialColorMode","useSystemColorMode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAGMA,EAAgB,WACpB,IAAMC,EAAeC,cACrB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,OACE,cAAC,IAAD,CAEEC,KAAK,IACLC,GAAI,EACJC,QAAQ,SACRC,GAAIR,EAAMS,OAAOC,KAAK,KACtBC,MAAM,QACNC,MACET,EAAU,CACRU,SAAU,QACVC,OAAQ,EACRC,OAAQ,QACRC,MAAO,SAEP,CACEC,QAAQ,QAfhB,SAmBE,cAAC,IAAD,CAAMC,MAAM,SAAZ,SAEIf,EACE,sBAAKS,MAAO,CAACK,QAAS,SAAtB,UACE,eAAC,IAAD,CAASL,MAAO,CACdO,SAAU,OACVF,QAAS,SAFX,UAGG,sBAAML,MAAO,CAACD,MAAMX,EAAMS,OAAOC,KAAK,MAAtC,kBAHH,WAGmE,uBAHnE,aAIU,sBAAME,MAAO,CAACD,MAAMX,EAAMS,OAAOC,KAAK,MAAtC,yBACV,cAAC,IAAD,CACEU,GAAG,IACHZ,GAAIR,EAAMS,OAAOC,KAAK,KACtBW,KAAK,KACLC,aAAW,sBACXX,MAAM,QACNY,QAAS,SAACC,GAAQpB,GAAW,IAN/B,oCAYF,kCASGqB,iBAAK1B,G,kHCnCd2B,EAAmB,WACvB,IAAM1B,EAAeC,cACrB,EAAgCC,qBAAhC,mBAAOyB,EAAP,KAAiBC,EAAjB,KACA,EAA4B1B,qBAA5B,mBAAO2B,EAAP,KAAeC,EAAf,KACA,EAAqC5B,qBAArC,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAwB9B,mBAA6B,UAArD,mBAAO+B,EAAP,KAAaC,EAAb,KACA,EAAgChC,oBAAkB,GAAlD,mBAAOiC,EAAP,KAAiBC,EAAjB,KAEMC,EAAeC,iBAAgC,MAErDC,qBAAU,WACJV,GAAUQ,EAAaG,UACzBH,EAAaG,QAAQC,UAAYZ,KAElC,CAACA,IAEJ,IAAMa,EAAc,uCAAG,gCAAAC,EAAA,yDACfC,EAAeC,UAAUD,aAEpB,UAATX,EAHmB,gCAITW,EAAaE,aAAa,CAChCC,OAAO,EACPC,OAAO,IANQ,0DAQRJ,EAAqBK,gBAAgB,CAC5CF,OAAO,EACPC,OAAO,IAVQ,kCAEfnB,EAFe,KAYfF,EAAsB,IAAIuB,2BAAyBrB,EAAQ,CAC/DI,KAAM,UAba,UAgBfN,EAASe,iBAhBM,QAiBrBd,EAAYD,GACZG,EAAUD,GACVG,EAAgB,MAChBI,GAAY,GACRC,EAAaG,UACfH,EAAaG,QAAQC,UAAYZ,GAtBd,4CAAH,qDA2BdsB,EAAa,uCAAG,4BAAAR,EAAA,0DAChBhB,EADgB,iCAEZA,EAASwB,gBAFG,uBAGOxB,EAASyB,UAHhB,OAGZC,EAHY,OAIjBxB,EAAeyB,OAChBtB,EAAgBqB,GAChBvB,EAAU,MACVF,EAAY,MAPM,4CAAH,qDA2BnB,OACE,eAAC,IAAD,CAAY2B,QAAQ,IAAIC,EAAE,IAA1B,UACE,eAAC,IAAD,CACEvC,QAAQ,OACRwC,eAAe,SACfC,cAAe,CACb,SACA,MACA,MACA,OAPJ,UAUE,eAAC,IAAD,CACEC,EAAE,IACFnD,GAAIR,EAAMS,OAAOC,KAAK,KACtBW,KAAK,KACLC,aAAW,kBACXX,MAAM,QACNY,QA1BW,WAEfW,EADW,WAATD,EACM,QAEA,WAgBN,UAQY,WAATA,EAAoB,qBAAuB,kBAClC,WAATA,EAAoB,cAAC,IAAD,CAAUrB,MAAO,CAACgD,WAAY,MAAOzC,SAAU,UAAc,cAAC,IAAD,CAAQP,MAAO,CAACgD,WAAY,YAGhH,cAAC,IAAD,CACED,EAAE,IACFnD,GAAIR,EAAMS,OAAOC,KAAK,KACtBW,KAAK,KACLC,aAAW,kBACXX,MAAM,QACNY,QAASmB,EACTmB,KAAM,cAAC,IAAD,CAAMC,GAAIC,QAElB,cAAC,IAAD,CACEJ,EAAE,IACFnD,GAAIR,EAAMS,OAAOC,KAAK,KACtBW,KAAK,KACLV,MAAM,QACNW,aAAW,iBACXC,QAAS4B,EACTa,UAAUrC,EACVkC,KAAM,cAAC,IAAD,CAAMC,GAAIG,QAElB,cAAC,IAAD,CACEzD,GAAIR,EAAMS,OAAOC,KAAK,KACtBiD,EAAE,IACFtC,KAAK,KACL2C,UAAajC,EACbpB,MAAM,QACNY,QAjEc,WACpB,GAAIQ,EAAW,CACb,IAAMmC,EAAU,IAAIC,KAAK,CAACpC,GAAY,WAAY,CAAEE,KAAM,cAC1DmC,iBAAOF,EAAD,gBAAmBG,KAAKC,MAAxB,WA+DFhD,aAAW,iBACXuC,KAAM,cAAC,IAAD,CAAMC,GAAIS,WAGpB,cAAC,IAAD,CAAKtD,QAAQ,OAAOwC,eAAe,SAAnC,SACE,eAAC,IAAD,CACEjD,GAAG,UACHgE,EAAE,OACFxD,MAAO,CACL,OACA,OACA,OACA,QAEFH,SAAS,WATX,YAWKkB,GACD,cAAC,SAAD,CACE0C,IAAKC,OAAOC,IAAIC,gBAAgB7C,GAChCnB,MAAO,CAAEI,MAAO,OAAQD,OAAQ,UAGnCsB,IAAiBN,GAChB,uBACE8C,IAAKxC,EACLyC,UAAQ,EACRC,OAAK,EACLnE,MAAO,CAAEI,MAAO,OAAQD,OAAQ,UAGnCoB,GACC,cAAC,IAAD,CACEtB,SAAS,WACTmE,IAAI,MACJC,KAAK,MACLC,UAAU,wBACVvE,MAAM,QACNQ,SAAS,KANX,0CAiBGM,iBAAKC,G,SCnLL1B,EAFMmF,YAAY,CAAEC,OALP,CAC1BC,iBAAkB,OAClBC,oBAAoB,KCQPC,EATC,WACd,OACE,eAAC,IAAD,CAAgBvF,MAAOA,EAAvB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKSwF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac64de87.chunk.js","sourcesContent":["import { FC, memo, useState } from 'react'\r\nimport { Flex, Heading, useTheme, Theme, Button } from '@chakra-ui/react'\r\n\r\nconst AppHeader: FC = () => {\r\n  const theme: Theme = useTheme()\r\n  const [wrapper, setWrapper] = useState(true);\r\n\r\n  return (\r\n    <Flex\r\n      // as=\"nav\"\r\n      flex=\"1\"\r\n      mb={4}\r\n      padding=\"1.5rem\"\r\n      bg={theme.colors.gray[700]}\r\n      color=\"white\"\r\n      style={\r\n        wrapper ? {\r\n          position: \"fixed\",\r\n          zIndex: 1,\r\n          height: \"100vh\",\r\n          width: \"100vw\",\r\n        } :\r\n          {\r\n            display:\"none\"\r\n          }\r\n      }\r\n    >\r\n      <Flex align=\"center\">\r\n        {\r\n          wrapper ?\r\n            <div style={{display: 'block'}}>\r\n              <Heading style={{\r\n                fontSize: '500%',\r\n                display: 'block'\r\n              }}><span style={{color:theme.colors.gray[400]}}>Free</span> Screen <br />\r\n              and Video <span style={{color:theme.colors.gray[400]}}>Recorder</span></Heading>\r\n              <Button\r\n                mt=\"5\"\r\n                bg={theme.colors.gray[500]}\r\n                size=\"lg\"\r\n                aria-label=\"start recording now\"\r\n                color=\"white\"\r\n                onClick={(e) => { setWrapper(false) }}\r\n              >\r\n                Start Recording Now\r\n              </Button>\r\n            </div>\r\n            :\r\n            <>\r\n              {/* <Heading size=\"md\">Free Screen and Video Recorder</Heading> */}\r\n            </>\r\n        }\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(AppHeader)\r\n","import React, { FC, memo, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Icon,\r\n  Theme,\r\n  Button,\r\n  useTheme,\r\n  SimpleGrid,\r\n  IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { FaVideoSlash, FaDownload, FaUser, FaPlay } from \"react-icons/fa\";\r\nimport { CgScreen } from \"react-icons/cg\";\r\nimport \"video-react/dist/video-react.css\";\r\n// @ts-ignore\r\nimport { Player } from \"video-react\";\r\n// @ts-ignore\r\nimport RecordRTC, {\r\n  // @ts-ignore\r\n  RecordRTCPromisesHandler,\r\n} from \"recordrtc\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst MainRecorder: FC = () => {\r\n  const theme: Theme = useTheme();\r\n  const [recorder, setRecorder] = useState<RecordRTC | null>();\r\n  const [stream, setStream] = useState<MediaStream | null>();\r\n  const [videoBlob, setVideoUrlBlob] = useState<Blob | null>();\r\n  const [type, setType] = useState<\"video\" | \"screen\">(\"screen\");\r\n  const [showText, setShowText] = useState<boolean>(true);\r\n\r\n  const liveVideoRef = useRef<HTMLVideoElement | null>(null); // Ref for the live video element\r\n\r\n  useEffect(() => {\r\n    if (stream && liveVideoRef.current) {\r\n      liveVideoRef.current.srcObject = stream; // Set the stream as the source for the live video element\r\n    }\r\n  }, [stream]);\r\n\r\n  const startRecording = async () => {\r\n    const mediaDevices = navigator.mediaDevices;\r\n    const stream: MediaStream =\r\n      type === \"video\"\r\n        ? await mediaDevices.getUserMedia({\r\n          video: true,\r\n          audio: true,\r\n        })\r\n        : await (mediaDevices as any).getDisplayMedia({\r\n          video: true,\r\n          audio: false,\r\n        });\r\n    const recorder: RecordRTC = new RecordRTCPromisesHandler(stream, {\r\n      type: \"video\",\r\n    });\r\n\r\n    await recorder.startRecording();\r\n    setRecorder(recorder);\r\n    setStream(stream);\r\n    setVideoUrlBlob(null);\r\n    setShowText(false)\r\n    if (liveVideoRef.current) {\r\n      liveVideoRef.current.srcObject = stream;\r\n    }\r\n\r\n  };\r\n\r\n  const stopRecording = async () => {\r\n    if (recorder) {\r\n      await recorder.stopRecording();\r\n      const blob: Blob = await recorder.getBlob();\r\n      (stream as any).stop();\r\n      setVideoUrlBlob(blob);\r\n      setStream(null);\r\n      setRecorder(null);\r\n    }\r\n  };\r\n\r\n  const downloadVideo = () => {\r\n    if (videoBlob) {\r\n      const mp4File = new File([videoBlob], \"demo.mp4\", { type: \"video/mp4\" });\r\n      saveAs(mp4File, `Video-${Date.now()}.mp4`);\r\n      // saveAs(videoBlob, `Video-${Date.now()}.webm`)\r\n    }\r\n  };\r\n\r\n  const changeType = () => {\r\n    if (type === \"screen\") {\r\n      setType(\"video\");\r\n    } else {\r\n      setType(\"screen\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SimpleGrid spacing=\"5\" p=\"5\">\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        flexDirection={[\r\n          \"column\", // 0-30em\r\n          \"row\", // 30em-48em\r\n          \"row\", // 48em-62em\r\n          \"row\", // 62em+\r\n        ]}\r\n      >\r\n        <Button\r\n          m=\"1\"\r\n          bg={theme.colors.gray[600]}\r\n          size=\"lg\"\r\n          aria-label=\"start recording\"\r\n          color=\"white\"\r\n          onClick={changeType}\r\n        >\r\n          {type === \"screen\" ? \"Recording Screen  \" : \"Recording Video\"}\r\n          {type === \"screen\" ? <CgScreen style={{marginLeft: \"5px\", fontSize: \"140%\"}} /> : <FaUser style={{marginLeft: \"5px\"}} />}\r\n          \r\n        </Button>\r\n        <IconButton\r\n          m=\"1\"\r\n          bg={theme.colors.gray[600]}\r\n          size=\"lg\"\r\n          aria-label=\"start recording\"\r\n          color=\"white\"\r\n          onClick={startRecording}\r\n          icon={<Icon as={FaPlay} />}\r\n        />\r\n        <IconButton\r\n          m=\"1\"\r\n          bg={theme.colors.gray[600]}\r\n          size=\"lg\"\r\n          color=\"white\"\r\n          aria-label=\"stop recording\"\r\n          onClick={stopRecording}\r\n          disabled={recorder ? false : true}\r\n          icon={<Icon as={FaVideoSlash} />}\r\n        />\r\n        <IconButton\r\n          bg={theme.colors.gray[600]}\r\n          m=\"1\"\r\n          size=\"lg\"\r\n          disabled={!!!videoBlob}\r\n          color=\"white\"\r\n          onClick={downloadVideo}\r\n          aria-label=\"download video\"\r\n          icon={<Icon as={FaDownload} />}\r\n        />\r\n      </Box>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        <Box\r\n          bg=\"inherit\"\r\n          h=\"auto\"\r\n          width={[\r\n            \"100%\", // 0-30em\r\n            \"100%\", // 30em-48em\r\n            \"60vw\", // 48em-62em\r\n            \"60vw\", // 62em+\r\n          ]}\r\n          position=\"relative\" // Added to position the text in the center\r\n        >\r\n          {!!videoBlob && (\r\n            <Player\r\n              src={window.URL.createObjectURL(videoBlob)}\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          )}\r\n          {liveVideoRef && !videoBlob && (\r\n            <video\r\n              ref={liveVideoRef}\r\n              autoPlay\r\n              muted\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          )}\r\n          {showText && (\r\n            <Box\r\n              position=\"absolute\"\r\n              top=\"50%\"\r\n              left=\"50%\"\r\n              transform=\"translate(-50%, -50%)\"\r\n              color=\"white\"\r\n              fontSize=\"xl\"\r\n            >\r\n              Start the recording\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </SimpleGrid>\r\n  );\r\n};\r\n\r\nexport default memo(MainRecorder);","// theme.js\r\n// 1. import `extendTheme` function\r\nimport { extendTheme, ThemeConfig, Theme } from '@chakra-ui/react'\r\n// 2. Add your color mode config\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n// 3. extend the theme\r\nconst theme: Theme = extendTheme({ config })\r\n\r\nexport default theme\r\n","import React, { FC } from 'react'\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\nimport { AppHeader, MainRecorder } from '@UI'\r\nimport theme from './theme'\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <AppHeader />\r\n      <MainRecorder />\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}